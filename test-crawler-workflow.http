### DocuMind Web Crawler Workflow Demo
### This file demonstrates the complete crawler workflow from start to finish

@RAG_Api_HostAddress = http://localhost:7001

###########################################################
### STEP 1: SYSTEM HEALTH CHECK
###########################################################

### Check RAG API Health and Available Models
GET {{RAG_Api_HostAddress}}/healthz
Accept: application/json

###########################################################
### STEP 2: START CRAWLING JOBS
###########################################################

### Job 1: Crawl Python Documentation
POST {{RAG_Api_HostAddress}}/crawler/crawl-python-docs
Content-Type: application/json

{
  "topics": ["asyncio", "fastapi", "pydantic"],
  "max_pages_per_topic": 15,
  "job_id": "python-docs-demo"
}

###

### Job 2: Crawl Microsoft Documentation
POST {{RAG_Api_HostAddress}}/crawler/crawl-microsoft-docs
Content-Type: application/json

{
  "paths": [
    "/dotnet/core/",
    "/azure/cognitive-services/"
  ],
  "max_pages": 20,
  "job_id": "microsoft-docs-demo"
}

###

### Job 3: General Web Crawl
POST {{RAG_Api_HostAddress}}/crawler/crawl
Content-Type: application/json

{
  "urls": [
    "https://docs.docker.com/get-started/",
    "https://kubernetes.io/docs/concepts/"
  ],
  "max_pages": 10,
  "delay_seconds": 1.5,
  "domain_hint": "technical",
  "job_id": "devops-docs-demo"
}

###########################################################
### STEP 3: MONITOR CRAWL PROGRESS
###########################################################

### Check Python Docs Crawl Status
GET {{RAG_Api_HostAddress}}/crawler/status/python-docs-demo
Accept: application/json

###

### Check Microsoft Docs Crawl Status
GET {{RAG_Api_HostAddress}}/crawler/status/microsoft-docs-demo
Accept: application/json

###

### Check DevOps Docs Crawl Status
GET {{RAG_Api_HostAddress}}/crawler/status/devops-docs-demo
Accept: application/json

###

### List All Active Jobs
GET {{RAG_Api_HostAddress}}/crawler/jobs
Accept: application/json

###########################################################
### STEP 4: WAIT FOR COMPLETION (Run after jobs complete)
###########################################################

### Test RAG System with Crawled Content - Python Query
POST {{RAG_Api_HostAddress}}/ask
Content-Type: application/json

{
  "q": "How do I create an async FastAPI endpoint with dependency injection?",
  "task_type": "code_generation"
}

###

### Test RAG System with Crawled Content - Azure Query
POST {{RAG_Api_HostAddress}}/ask
Content-Type: application/json

{
  "q": "What are the best practices for Azure Cognitive Services implementation?",
  "task_type": "technical"
}

###

### Test RAG System with Crawled Content - DevOps Query
POST {{RAG_Api_HostAddress}}/ask
Content-Type: application/json

{
  "q": "Explain Kubernetes pod scheduling and resource management",
  "task_type": "technical"
}

###

### Enhanced Ask with Model Selection
POST {{RAG_Api_HostAddress}}/ask-enhanced
Content-Type: application/json

{
  "query": "Generate a Docker Compose file for a FastAPI application with Redis and PostgreSQL",
  "task_type": "code_generation",
  "preferred_model": "deepseek-coder:6.7b",
  "max_tokens": 1500,
  "temperature": 0.1
}

###########################################################
### STEP 5: ADVANCED TESTING
###########################################################

### Test Domain Detection with Crawled Content
POST {{RAG_Api_HostAddress}}/ask
Content-Type: application/json

{
  "q": "Compare async/await patterns in Python vs .NET Core and provide code examples",
  "task_type": "code_explanation"
}

###

### Test Search Functionality
GET {{RAG_Api_HostAddress}}/rag/search?q=docker container orchestration&k=8
Accept: application/json

###

### Test Build Prompt for Debugging
POST {{RAG_Api_HostAddress}}/build-prompt
Content-Type: application/json

{
  "query": "Kubernetes deployment strategies with zero downtime"
}

###########################################################
### STEP 6: CLEANUP (Optional)
###########################################################

### Cancel a Running Job (if needed)
# DELETE {{RAG_Api_HostAddress}}/crawler/jobs/python-docs-demo
# Accept: application/json

###

### Start New Crawl Job with Different Parameters
POST {{RAG_Api_HostAddress}}/crawler/crawl
Content-Type: application/json

{
  "urls": [
    "https://fastapi.tiangolo.com/tutorial/"
  ],
  "max_pages": 25,
  "delay_seconds": 1.0,
  "domain_hint": "technical",
  "job_id": "fastapi-tutorial-crawl"
}

###########################################################
### STEP 7: COMPREHENSIVE SYSTEM TEST
###########################################################

### Multi-Model Query Testing
POST {{RAG_Api_HostAddress}}/ask
Content-Type: application/json

{
  "q": "Create a complete microservices architecture using FastAPI, Docker, and Kubernetes with monitoring and logging",
  "task_type": "code_generation"
}

###

### Domain-Specific Technical Query
POST {{RAG_Api_HostAddress}}/ask
Content-Type: application/json

{
  "q": "Explain the differences between Azure Container Instances and Azure Kubernetes Service for microservices deployment",
  "task_type": "technical"
}

###

### Code Understanding Query
POST {{RAG_Api_HostAddress}}/ask
Content-Type: application/json

{
  "q": "Analyze this code pattern: async with contextlib.asynccontextmanager() and explain when to use it",
  "task_type": "code_explanation"
}

###########################################################
### EXPECTED WORKFLOW RESULTS
###########################################################

# After running this workflow, you should see:
# 1. Successful job creation with unique job IDs
# 2. Progress tracking showing "queued" → "running" → "completed"
# 3. Increased document count in the vector database
# 4. Enhanced answers that reference crawled content
# 5. Proper model selection based on task type
# 6. Domain detection working with technical content
# 7. Citations to crawled documents in responses

###########################################################
### TROUBLESHOOTING ENDPOINTS
###########################################################

### Check System Health
GET {{RAG_Api_HostAddress}}/healthz
Accept: application/json

###

### Test Model Availability
# This should show all available Ollama models
# and which ones are being used for different tasks

###

### Check Vector Database Status
GET {{RAG_Api_HostAddress}}/rag/search?q=test&k=1
Accept: application/json

# If this returns results, the vector database is working
# If empty, crawling may not have completed or failed

###

### Manual Content Ingestion Test
POST {{RAG_Api_HostAddress}}/ingest/text
Content-Type: application/json

{
  "doc_id": "manual-test-001",
  "text": "This is a manual test to verify the ingestion pipeline is working correctly. The system should be able to chunk, embed, and store this content for retrieval."
}

###
